from framefox.core.controller.abstract_controller import AbstractController
from framefox.core.routing.decorator.route import Route
from typing import Optional, Dict
from src.repository.{{ repository_file_name }} import {{ repository_class_name }}
from src.entity.{{ entity_file_name }} import {{ entity_class_name }}
from framefox.core.orm.entity_manager import EntityManager


class {{ controller_class_name }}(AbstractController):
    def __init__(self, entityManager: EntityManager):
        self.entity_manager = entityManager

    @Route("/{{ entity_name }}s", "{{ entity_file_name }}.read_all", methods=["GET"])
    async def read_all(self):
        return {{ repository_class_name }}().find_all()

    @Route("/{{ entity_name }}/{id}", "{{ entity_file_name }}.read", methods=["GET"])
    async def read(self, id: int):
        return {{ repository_class_name }}().find({"id": id})

    @Route("/{{ entity_name }}", "{{ entity_file_name }}.create", methods=["POST"])
    async def create(self, {{ entity_name }}: {{ entity_class_name }}.generate_create_model()):
        entity_instance = {{ repository_class_name }}().model(**{{ entity_name }}.dict())
        self.entity_manager.persist(entity_instance)
        self.entity_manager.commit()
        return self.json(
            data={"message": "Created successfully",
                  "id": entity_instance.id},
            status=201
        )

    @Route("/{{ entity_name }}/edit/{id}", "{{ entity_file_name }}.update", methods=["PUT"])
    async def update(self, {{ entity_name }}: {{ entity_class_name }}):
        self.entity_manager.persist({{ entity_name }})
        self.entity_manager.commit()
        return self.json(
            data={"message": "Updated successfully"},
            status=200
        )

    @Route("/{{ entity_name }}/delete/{id}", "{{ entity_file_name }}.delete", methods=["DELETE"])
    async def delete(self, id: int):
        entity_instance = {{ repository_class_name }}().find(id)
        self.entity_manager.delete(entity_instance)
        self.entity_manager.commit()
        return self.json(
            data={"message": "Deletion success"},
            status=204
        )
{% raw %}{% endraw %}