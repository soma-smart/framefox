from framefox.core.controller.abstract_controller import AbstractController
from framefox.core.routing.decorator.route import Route
from src.repository.{{ repository_file_name }} import {{ repository_class_name }}
from src.entity.{{ entity_file_name }} import {{ entity_class_name }}
from framefox.core.orm.entity_manager import EntityManager
from fastapi import Request

class {{ controller_class_name }}(AbstractController):
    def __init__(self, entityManager: EntityManager):
        self.entity_manager = entityManager
        self.repository = {{ repository_class_name }}()

    @Route("/{{ entity_name }}s", "{{ entity_file_name }}.read_all", methods=["GET"])
    async def read_all(self):
        items = self.repository.find_all()
        return self.render("{{ entity_name }}/index.html", {"items": items})

    @Route("/{{ entity_name }}/create", "{{ entity_file_name }}.create", methods=["GET", "POST"])
    async def create(self, request: Request):
        if request.method == "POST" :
            try:
                form_data = await request.form()
                model_class = self.repository.model.generate_create_model()
                product_data = model_class(**dict(form_data))
                entity_instance = self.repository.model(**product_data.dict())
                self.entity_manager.persist(entity_instance)
                self.entity_manager.commit()
                self.flash("success", "{{ entity_class_name }} created successfully!")
                return self.redirect(self.generate_url("{{ entity_file_name }}.read_all"))
            except Exception as e:
                self.flash("error", str(e))
                return self.render("{{ entity_name }}/create.html", {"error": str(e)})
        
        return self.render("{{ entity_name }}/create.html")

    @Route("/{{ entity_name }}/{id}", "{{ entity_file_name }}.read", methods=["GET"])
    async def read(self, id: int):
        item = self.repository.find({"id": id})
        if not item:
            self.flash("error", "{{ entity_class_name }} not found!")
            return self.redirect(self.generate_url("{{ entity_file_name }}.read_all"))
        return self.render("{{ entity_name }}/read.html", {"item": item})


    @Route("/{{ entity_name }}/{id}/update", "{{ entity_file_name }}.update", methods=["GET", "POST"])
    async def update(self, request: Request, id: int):
        entity_instance = self.repository.find({"id": id})
        if not entity_instance:
            self.flash("error", "{{ entity_class_name }} not found!")
            return self.redirect(self.generate_url("{{ entity_file_name }}.read_all"))

        if request.method == "POST":
            try:
                form_data = await request.form()
                model_class = self.repository.model.generate_create_model()
                updated_data = model_class(**dict(form_data))
                
                for key, value in updated_data.dict().items():
                    setattr(entity_instance, key, value)
                
                self.entity_manager.persist(entity_instance)
                self.entity_manager.commit()
                self.flash("success", "{{ entity_class_name }} updated successfully!")
                return self.redirect(self.generate_url("{{ entity_file_name }}.read_all"))
            except Exception as e:
                self.flash("error", str(e))
                return self.render("{{ entity_name }}/update.html", {
                    "item": entity_instance,
                    "error": str(e)
                })
        
        return self.render("{{ entity_name }}/update.html", {"item": entity_instance})

    @Route("/{{ entity_name }}/delete/{id}", "{{ entity_file_name }}.delete", methods=["POST"])
    async def delete(self, id: int):
        try:
            entity_instance = self.repository.find({"id": id})
            if not entity_instance:
                self.flash("error", "{{ entity_class_name }} not found!")
                return self.redirect(self.generate_url("{{ entity_file_name }}.read_all"))
            
            self.entity_manager.delete(entity_instance)
            self.entity_manager.commit()
            self.flash("success", "{{ entity_class_name }} deleted successfully!")
            return self.redirect(self.generate_url("{{ entity_file_name }}.read_all"))
        except Exception as e:
            self.flash("error", str(e))
            return self.redirect(self.generate_url("{{ entity_file_name }}.read_all"))