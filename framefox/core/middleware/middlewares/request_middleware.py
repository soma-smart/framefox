import logging

from fastapi import Request
from starlette.middleware.base import BaseHTTPMiddleware

from framefox.core.events.decorator.dispatch_event import DispatchEvent
from framefox.core.request.request_stack import RequestStack

"""
Framefox Framework developed by SOMA
Github: https://github.com/soma-smart/framefox
----------------------------
Author: BOUMAZA Rayen
Github: https://github.com/RayenBou
"""


class RequestMiddleware(BaseHTTPMiddleware):
    """
    RequestMiddleware is a custom middleware that sets the current request in the RequestStack
    before passing it to the next middleware or route handler.

    Methods:
        dispatch(request: Request, call_next):
            Asynchronously sets the current request in the RequestStack and then
            calls the next middleware or route handler in the chain.

    Args:
        request (Request): The incoming HTTP request.
        call_next (Callable): The next middleware or route handler to be called.

    Returns:
        Response: The HTTP response generated by the next middleware or route handler.
    """

    def __init__(self, app):
        super().__init__(app)
        self.logger = logging.getLogger("REQUEST")
        self.static_extensions = [
        '.css', '.js', '.png', '.jpg', '.jpeg', '.gif', '.svg', 
        '.ico', '.woff', '.woff2', '.ttf', '.eot'
        ]
    

    @DispatchEvent(
        event_before="kernel.request_received", event_after="kernel.finish_request"
    )
    async def dispatch(self, request: Request, call_next):
        RequestStack.set_request(request)
        path = request.url.path
        if not any(path.endswith(ext) for ext in self.static_extensions):
            self.logger.info(f"Incoming request: {request.method} {path}")
    
        response = await call_next(request)
        return response
