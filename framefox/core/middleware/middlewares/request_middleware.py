import logging
import time

from fastapi import Request
from starlette.middleware.base import BaseHTTPMiddleware

from framefox.core.events.decorator.dispatch_event import DispatchEvent
from framefox.core.logging.context_logger import ContextLogger
from framefox.core.request.request_stack import RequestStack
from framefox.core.request.static_resource_detector import StaticResourceDetector

"""
Framefox Framework developed by SOMA
Github: https://github.com/soma-smart/framefox
----------------------------
Author: BOUMAZA Rayen
Github: https://github.com/RayenBou
"""


class RequestMiddleware(BaseHTTPMiddleware):
    """
    RequestMiddleware is a custom middleware that:
    1. Sets the current request in the RequestStack
    2. Creates a unique request ID and logging context
    3. Logs request metrics and performance
    4. Dispatches events related to request lifecycle

    Methods:
        dispatch(request: Request, call_next):
            Asynchronously processes the request with logging and performance tracking.

    Args:
        request (Request): The incoming HTTP request
        call_next (Callable): The next middleware or route handler to be called

    Returns:
        Response: The HTTP response generated by the next middleware or route handler
    """

    def __init__(self, app):
        super().__init__(app)
        self.logger = ContextLogger.get_logger("REQUEST")

    @DispatchEvent(event_before="kernel.request_received", event_after="kernel.finish_request")
    async def dispatch(self, request: Request, call_next):
        # Store request in RequestStack (original functionality)
        RequestStack.set_request(request)

        # Generate a unique request ID (ContextLogger functionality)
        request_id = ContextLogger.set_request_id()

        # Add basic context information
        ContextLogger.set_context_value("client_ip", request.client.host if request.client else "unknown")
        ContextLogger.set_context_value("method", request.method)
        ContextLogger.set_context_value("path", request.url.path)

        path = request.url.path
        is_static_resource = StaticResourceDetector.is_static_resource(path)
        if not is_static_resource:
            self.logger.info(f"Incoming request: {request.method} {path}")

        start_time = time.time()

        try:
            # Execute the request handler
            response = await call_next(request)
            # Calculate duration
            duration_ms = round((time.time() - start_time) * 1000, 2)

            # Add response information to context
            ContextLogger.set_context_value("status_code", response.status_code)
            ContextLogger.set_context_value("duration_ms", duration_ms)

            return response

        except Exception as e:
            # In case of error
            duration_ms = round((time.time() - start_time) * 1000, 2)
            ContextLogger.set_context_value("duration_ms", duration_ms)
            ContextLogger.set_context_value("error", str(e))

            self.logger.error(f"Request failed: {request.method} {path} - " f"Error: {str(e)} - Duration: {duration_ms} ms")

            # Re-raise the exception for the exception handler
            raise
