import logging
from fastapi import Request
from starlette.middleware.base import BaseHTTPMiddleware
<<<<<<< Updated upstream:src/core/middleware/middlewares/request_middleware.py
<<<<<<< Updated upstream:src/core/middleware/middlewares/request_middleware.py
from src.core.request.request_stack import RequestStack
from src.core.events.decorator.dispatch_event import DispatchEvent
import uuid
from src.core.request.cookie_manager import CookieManager
from injectable import autowired, Autowired
from typing import Annotated
from src.core.config.settings import Settings
=======
from injectable import autowired, Autowired
from typing import Annotated
=======
from injectable import autowired, Autowired
from typing import Annotated
>>>>>>> Stashed changes:framefox/core/middleware/middlewares/request_middleware.py

from framefox.core.config.settings import Settings
from framefox.core.request.request_stack import RequestStack
from framefox.core.events.decorator.dispatch_event import DispatchEvent
from framefox.core.request.cookie_manager import CookieManager
<<<<<<< Updated upstream:src/core/middleware/middlewares/request_middleware.py
>>>>>>> Stashed changes:framefox/core/middleware/middlewares/request_middleware.py
=======
>>>>>>> Stashed changes:framefox/core/middleware/middlewares/request_middleware.py


class RequestMiddleware(BaseHTTPMiddleware):
    """
    RequestMiddleware is a custom middleware that sets the current request in the RequestStack
    before passing it to the next middleware or route handler.

    Methods:
        dispatch(request: Request, call_next):
            Asynchronously sets the current request in the RequestStack and then
            calls the next middleware or route handler in the chain.

    Args:
        request (Request): The incoming HTTP request.
        call_next (Callable): The next middleware or route handler to be called.

    Returns:
        Response: The HTTP response generated by the next middleware or route handler.
    """
    @autowired
    def __init__(self, app, settings: Annotated[Settings, Autowired]):
        super().__init__(app)
        self.logger = logging.getLogger("REQUEST")
        self.cookie_manager = CookieManager()
        self.settings = settings

    @DispatchEvent(
        event_before="kernel.request_received", event_after="kernel.finish_request"
    )
    async def dispatch(self, request: Request, call_next):
        RequestStack.set_request(request)
        self.logger.info(
            f"Incoming request: {
                request.method} {request.url.path}"
        )
        # session_id = request.state.session_id or str(uuid.uuid4())
        response = await call_next(request)
        # self.cookie_manager.set_cookie(
        #     response, "session_id", session_id, self.settings.cookie_max_age, ...)
        # self.logger.info(f"Client: {request.client}")
        return response
