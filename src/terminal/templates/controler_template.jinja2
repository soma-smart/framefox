from src.core.routing.decorator.route import Route
from src.core.controller.abstract_controller import AbstractController
from typing import Optional, Dict
from src.repository.{{ repository_file_name }} import {{ repository_class_name }}
from src.entity.{{ entity_file_name }} import {{ entity_class_name }}


class {{ controller_class_name }}(AbstractController):
    @Route("/{{ entities_name }}", "get_{{ entities_name }}", methods=["GET"])
    async def get_{{ entities_name }}(self):
        return {{ repository_class_name }}().find_all()

    @Route("/{{ entities_name }}/search", "search_{{ entities_name }}", methods=["POST"])
    async def search_{{ entities_name }}(
        self,
        criteria: Dict[str, str],
        order_by: Optional[Dict[str, str]] = None,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
    ):
        {{ entities_name }} = {{ repository_class_name }}().find_by(criteria, order_by, limit, offset)
        return {{ entities_name }}

    @Route("/{{ entities_name }}/find", "get_{{ entity_name }}", methods=["POST"])
    async def get_{{ entity_name }}(self, keys_formula: {{ entity_class_name }}.generate_find_model()):
        return {{ repository_class_name }}().find(keys_formula.dict())

    @Route("/{{ entities_name }}", "create_{{ entity_name }}", methods=["POST"])
    async def create_{{ entity_name }}(self, {{ entity_name }}: {{ entity_class_name }}):
        entity_instance = {{ repository_class_name }}().model(**{{ entity_name }}.dict())
        self.entity_manager.persist(entity_instance)
        self.entity_manager.commit()

    @Route("/{{ entities_name }}", "update_{{ entity_name }}", methods=["PUT"])
    async def update_{{ entity_name }}(self, {{ entity_name }}: {{ entity_class_name }}):
        self.entity_manager.persist({{ entity_name }})
        self.entity_manager.commit()

    @Route("/{{ entities_name }}/{id}", "delete_{{ entity_name }}", methods=["DELETE"])
    async def delete_{{ entity_name }}(self, id: int):
        entity_instance = {{ repository_class_name }}().find(id)
        self.entity_manager.delete(entity_instance)
        self.entity_manager.commit()
{% raw %}{% endraw %}